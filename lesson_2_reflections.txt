What happens when you initialize a repository? Why do you need to do it?

  It creates a new repository with zero commits. You need to do this so that you
  can track your commits for version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area is a holding area for you files that need to be committed. It
  differs from the working directory and repository because these areas actually
  contain the files that you are working with.

How can you use the staging area to make sure you have one commit per logical
change?

  Whenever you make a significant change, you can use the staging area to track
  this and then commit this change. This way you will have this new version of
  your project, as well as any older versions in case you decide to revert back.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  As described in the lesson, if you have different versions of the game, you
  will want them to be separate so that you do not overwrite the original game.
  Or if you are experimenting with a project but do not want it to affect the
  original, you can separate them by having different branches to hold the
  different versions.

How do the diagrams help you visualize the branch structure?

  I am a visual learner, so this helps because command lines do not always
  provide a good visual for things such as this. Instead of just looking at the
  logs, now you have a way to visualize your entire structure of a project to
  better understand what is happening.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  The result ties the two branches together with all of the necessary changes.
  It is represented in the diagram this way because it shows the parents of each
  commits and when new branches form. It also shows when the branches come back
  together in order to apply new versions or features to the main project.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

  The pros are that it saves time and makes merging much easier than having to
  do it manually. The cons would be that you are given the "changing/merging
  power" to Git and allowing it to make the logical changes. This may be fine,
  but it may also not have included things that you may have wanted it to.
